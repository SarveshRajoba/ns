CODE 1- 

#include <iostream>
#include <string>
#include <limits>

#if defined(_WIN32) || defined(_WIN64)
  #include <conio.h>
  // on Windows, _getch() reads one char without echo
  static char getch_noecho() { return _getch(); }
#else
  #include <termios.h>
  #include <unistd.h>
  // on Unix, implement getch(): turn off echo, read one char, restore
  static char getch_noecho() {
      struct termios oldt, newt;
      tcgetattr(STDIN_FILENO, &oldt);
      newt = oldt;
      newt.c_lflag &= ~(ECHO | ICANON);
      tcsetattr(STDIN_FILENO, TCSANOW, &newt);
      char c = getchar();
      tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
      return c;
  }
#endif

const std::string DEFAULT_PASSWORD = "PICT123";

// Reads a line of input, masking with '*' as the user types.
// Supports backspace editing.
std::string getMaskedInput() {
    std::string password;
    while (true) {
        char c = getch_noecho();
        if (c == '\r' || c == '\n') {
            std::cout << '\n';
            break;
        }
        if (c == '\b' || c == 127) {
            if (!password.empty()) {
                password.pop_back();
                // move cursor back, overwrite, move back again
                std::cout << "\b \b";
            }
        } else {
            password += c;
            std::cout << '*';
        }
    }
    return password;
}

void displayMaskedPassword() {
    std::cout << "Enter the password: ";
    std::string pwd = getMaskedInput();
    if (pwd == DEFAULT_PASSWORD) {
        std::cout << "Correct password: " << pwd << "\n";
    } else {
        std::cout << "Incorrect password.\n";
    }
}

int main() {
    int choice;
    do {
        std::cout << "\n1. Check Default Password\n"
                  << "2. Display Masked Password\n"
                  << "3. Exit\n"
                  << "Choose an option: ";
        if (!(std::cin >> choice)) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            choice = 0;
        }
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

        switch (choice) {
            case 1: {
                std::string input;
                std::cout << "Enter the password: ";
                std::getline(std::cin, input);
                std::cout << (input == DEFAULT_PASSWORD
                              ? "It is the default password.\n"
                              : "It is not the default password.\n");
                break;
            }
            case 2:
                displayMaskedPassword();
                break;
            case 3:
                std::cout << "Exiting...\n";
                break;
            default:
                std::cout << "Invalid option. Try again.\n";
        }
    } while (choice != 3);

    return 0;
}

------------------------------------------------------------------------------------------------------------------
CODE 2- 

    #include <iostream>
    #include <vector>
    #include <string>
    #include <algorithm> // for sort
    using namespace std;

    string encrypt(string key, string plain_text) {
        int key_len = key.length();
        int pt_len = plain_text.length();

        // Step 1: Count rows correctly
        int rows = (pt_len + key_len - 1) / key_len + 1;

        // Step 2: Create grid (including key row)
        vector<string> grid(rows, string(key_len, ' '));

        // First row is the key
        grid[0] = key;

        // Step 3: Fill the grid with plain text
        int index = 0;
        for (int r = 1; r < rows; r++) {
            for (int c = 0; c < key_len && index < pt_len; c++) {
                grid[r][c] = plain_text[index++];
            }
        }

        // Step 4: Sort the key to decide column order
        string sorted_key = key;
        sort(sorted_key.begin(), sorted_key.end());

        // Step 5: Generate Cipher Text
        string cipher;
        for (char ch : sorted_key) {
            // Important: Use a loop in case of repeated characters in key
            for (int i = 0; i < key_len; i++) {
                if (key[i] == ch) {
                    for (int r = 1; r < rows; r++) {
                        cipher += grid[r][i];
                    }
                    // Mark column used to avoid duplicate usage if character repeats
                    key[i] = '\0';
                    break;
                }
            }
        }
        cout<<"Printing MAtrix : "<<endl ;
        for(auto i : grid){
            for(auto j : i){
                cout<<j<<" ";
            }
            cout<<endl ;
        }

        return cipher;
    }

    string decrypt(string key,string cipher){
        int key_len = key.length() ;
        int cipher_len = cipher.length() ;
        
        int rows = (key_len + cipher_len -1)/key_len + 1 ;
        
        vector<string>grid(rows,string(key_len,' ')) ;
        
        string sorted_key = key ;
        
        sort(sorted_key.begin(),sorted_key.end()) ;
        int index = 0 ; 
        for(char ch : sorted_key){
            for(int i = 0 ; i < key_len ; i++){
                if(key[i] == ch){
                    for(int r = 1 ; r < rows && index < cipher_len; r++){
                        grid[r][i] = cipher[index++] ;
                    }
                    key[i] = '\0' ;
                    break ;
                }
            }
        }
        string plain_text  ;
        for(int r = 1 ; r < rows ; r++ ){
            for(int c = 0 ; c < key_len ; c++)
            {
                plain_text += grid[r][c] ;
            }
        }
        return plain_text ;
    }

    int main() {
        string key = "MEGABUCK";
        string plain_text = "please transfer one million dollars to my swiss bank account six two two four";

        cout << "KEY : " << key << endl;
        cout << "Plain Text : " << plain_text << endl;

        string encrypted_text = encrypt(key, plain_text);
        cout << "Encrypted Text : " << encrypted_text << endl;
        string decrypted_text = decrypt(key,encrypted_text) ;
        cout<<"Decrypted Text : "<<decrypted_text<<endl ;
        return 0;
    }

------------------------------------------------------------------------------------------------------------------
CODE 3- 

#include <iostream>
#include <string>
using namespace std;
string encryption(string Name, int key)
{
for(int i=0;i<Name.length();i++)
{
Name[i] += key;
}
return Name;
}
string decryption(string Name, int key)
{
for(int i=0;i<Name.length();i++)
{
Name[i] -= key;
}
return Name;
}
string Caesar_encryption(string Name, int key)
{
for(int i=0;i<Name.length();i++)
{
int num = Name[i] -'a';
num = (num+key)%26 +'a';
Name[i] = char(num);
}
return Name;
}
string Caesar_decryption(string Name, int key)
{
for(int i=0;i<Name.length();i++)
{
int num = Name[i] -'a';
num = (num-key)%26 +'a';
Name[i] = char(num);
}
return Name;
}
int main() {
 string sentence="password";
 //cout << "The password is: " << sentence << endl;

 int key;
 cout<<"Enter Key";
 cin>>key;
cout << "The Original Text is: " << sentence << endl;
 string encrypted = Caesar_encryption(sentence,key);
cout<<"The Encrypted Text is : "<<encrypted<< endl;
string decrypted = Caesar_decryption(encrypted,key);
cout<<"The Encrypted Text is : "<<decrypted<< endl;
 file.close(); // Close the file
 return 0;
}
